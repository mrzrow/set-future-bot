from collections import Counter

from .study_enum import Study
from .messages import RESULT_MESSAGE, COURSES_BULLET_POINTS, COURSES_NAMES


class Question:
    def __init__(
            self,
            question: str,
            answers: tuple[str, ...],
            points: tuple[tuple[Study, Study], ...]
    ):
        self.question = question
        self.answers = answers
        self.points = points
        self.questions_number = len(self.answers)
    
    def get_answer(self, answer_number: int) -> tuple[Study, Study]:
        if answer_number < 0 or answer_number >= self.questions_number:
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞')
        return self.points[answer_number]

    def get_question_text(self) -> str:
        msg = f'{self.question}\n'
        for i, answ in enumerate(self.answers, 1):
            msg += f'{i}. {answ}\n'
        return msg


class Quiz:
    def __init__(self, questions: tuple[Question, ...]):
        self.questions = questions
        self.iter = 0
        self.counter = Counter()

    def move_to_next_question(self) -> None:
        self.iter += 1

    def is_end(self) -> bool:
        return self.iter >= len(questions)
    
    def get_question_text(self) -> str:
        return self.questions[self.iter].get_question_text()
    
    def set_result(self, answer_number: int) -> None:
        result = self.questions[self.iter].get_answer(answer_number=answer_number)
        self.counter.update(result)

    def get_result_message(self) -> str:
        course = self.counter.most_common(1)[0][0]
        msg = RESULT_MESSAGE.format(COURSES_BULLET_POINTS[course], COURSES_NAMES[course])
        return msg
    

questions = (
    Question(
        question='<b>–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –≤—Å–µ–≥–æ?</b> üß°',
        answers=(
            '–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –∏–∑–Ω—É—Ç—Ä–∏',
            '–°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (–¥–∏–∑–∞–π–Ω, –≤–µ—Ä—Å—Ç–∫–∞)',
            '–î–µ–ª–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–Ω–∏–º–∞—Ç—å, –ø–∏—Å–∞—Ç—å',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∑–∞–¥–∞—á',
        ),
        points=(
            (Study.business, Study.marketing),
            (Study.web, Study.smm),
            (Study.smm, Study.communication),
            (Study.ai, Study.marketing),
        )
    ),
    Question(
        question='<b>–ö–∞–∫–∞—è —Ä–æ–ª—å —Ç–µ–±–µ –±–ª–∏–∂–µ?</b> üîé',
        answers=(
            '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä ‚Äî —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏',
            '–ò–¥–µ–π–Ω—ã–π –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å ‚Äî —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å –∏ –¥–æ–Ω–æ—Å–∏—Ç—å –∏–¥–µ–∏',
            '–¢–∏—Ö–∏–π —Å—Ç—Ä–∞—Ç–µ–≥ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è',
        ),
        points=(
            (Study.event, Study.business),
            (Study.smm, Study.communication),
            (Study.marketing, Study.ai),
        )
    ),
    Question(
        question='<b>–° —á–µ–≥–æ —Ç—ã –Ω–∞—á–Ω—ë—à—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º?</b> üöÄ',
        answers=(
            '–£–∑–Ω–∞—é, –∫—Ç–æ –¶–ê –∏ –∫–∞–∫ –∏–º –ø—Ä–æ–¥–∞—Ç—å –∏–¥–µ—é',
            '–ù–∞—Ä–∏—Å—É—é –≤–∏–∑—É–∞–ª –∏ –ø–æ–¥—É–º–∞—é –æ —Å—Ç–∏–ª–µ',
            '–†–∞–∑–ª–æ–∂—É –≤—Å—ë –ø–æ —ç—Ç–∞–ø–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑—É—é –ø—Ä–æ—Ü–µ—Å—Å',
        ),
        points=(
            (Study.marketing, Study.communication),
            (Study.web, Study.smm),
            (Study.business, Study.event),
        )
    ),
    Question(
        question='<b>–ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –ø–æ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç—É?</b> üéØ',
        answers=(
            '–õ–æ–≥–∏–∫–∞, —á—ë—Ç–∫–æ—Å—Ç—å, —Ä–∞–±–æ—Ç–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏',
            '–≠–º–æ—Ü–∏–∏, —è—Ä–∫–æ—Å—Ç—å, –æ–±—â–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏',
            '–í–∏–∑—É–∞–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è',
        ),
        points=(
            (Study.ai, Study.marketing, Study.business),
            (Study.smm, Study.communication, Study.event),
            (Study.web, Study.smm),
        )
    ),
    Question(
        question='<b>–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ?</b> üèÖ',
        answers=(
            '–£–ø–æ—Ä—è–¥–æ—á–∏—Ç—å —Ö–∞–æ—Å –∏ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ¬´–ø–æ–¥ –∫–ª—é—á¬ª',
            '–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
            '–ü–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞, –∏ —É–ª—É—á—à–∏—Ç—å –µ—ë',
        ),
        points=(
            (Study.business, Study.event),
            (Study.smm, Study.web, Study.communication),
            (Study.ai, Study.marketing),
        )
    ),
    Question(
        question='<b>–ü—Ä–µ–¥—Å—Ç–∞–≤—å: –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –¢–≤–æ—è –∑–æ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?</b> üñáÔ∏è',
        answers=(
            '–í—ã—Å—Ç—É–ø–∞—é, —É–±–µ–∂–¥–∞—é, –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Å—å',
            '–ü–æ–∫–∞–∑—ã–≤–∞—é –º–∞–∫–µ—Ç—ã, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
            '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é',
        ),
        points=(
            (Study.communication, Study.event, Study.marketing),
            (Study.smm, Study.web),
            (Study.ai, Study.marketing),
        )
    ),
    Question(
        question='<b>–ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ?</b> ü§ç',
        answers=(
            '–û—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–∏',
            '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è',
            '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑—É—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏ –¥–µ–ª–∞—Ç—å ¬´—É–º–Ω—É—é¬ª —Ä–∞–±–æ—Ç—É',
        ),
        points=(
            (Study.business, Study.event, Study.marketing),
            (Study.smm, Study.web, Study.communication),
            (Study.ai, Study.marketing),
        )
    )
)
